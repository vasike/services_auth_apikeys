<?php
/**
 * @file
 * Include file for the services_auth_apikeys module.
 */

/**
 * Access callback for Services authentication.
 *
 * @see hook_services_authentication_info()
 */
function _services_auth_apikeys_authenticate_call($settings, $method, $args) {
  $authentication_settings = _services_auth_apikeys_get_authentication_settings($settings);
  $apikeys['api_key'] = $settings['api_key']['identifier'];
  $apikeys['token'] = $settings['token']['identifier'];
  if (!empty($settings['extra_key']) && $settings['extra_key']['enabled']) {
    $apikeys['extra_key'] = $settings['extra_key']['identifier'];
  }
  // Get the API keys sent by services request.
  // For now, only API keys as HTTP Headers are implemented
  // ToDo: other request parameter types for API keys, ex. GET, values.
  if ($authentication_settings['parameters_type'] == 'http_headers') {
    $missing_apikeys = array();
    foreach ($apikeys as $apikey => $id) {
      $http_id = 'HTTP_' . str_replace('-', '_', $id);
      if (empty($_SERVER[$http_id])) {
        $missing_apikeys[$apikey] = $id;
      }
      else {
        $apikeys_values[$apikey] = $_SERVER[$http_id];
      }
    }
  }
  // Return messages for missing API keys.
  if (!empty($missing_apikeys)) {
    return t('The service requires data for @apikeys.', array('@apikeys' => implode(', ', $missing_apikeys)));
  }
  // Get the user id for the API keys sent.
  $service_endpoint = services_get_server_info('endpoint');
  $uid = services_auth_apikeys_load_by_apikeys($apikeys_values, $service_endpoint, TRUE);
  if (!$uid) {
    // Invalid API keys.
    return t('The API keys sent are invalid.');
  }
  else {
    global $user;
    $user = user_load($uid);
    // Check if the user exist.
    if (!$user) {
      return t('The user does not exist anymore.');
    }
    // Check if the user has access to the API keys authentication.
    if (!user_access('services use api keys authentication', $user)) {
      return t('Access denied.') . ' ' . t('The user with these credentials does not have permissions to the services.');
    }
  }
}

/**
 * Default settings callback for Services authentication.
 *
 * @see hook_services_authentication_info()
 */
function _services_auth_apikeys_default_security_settings() {
  return array(
    'api_key' => array(
      'identifier' => 'API-KEY',
      'generate' => FALSE,
    ),
    'token' => array(
      'identifier' => 'TOKEN',
      'generate' => TRUE,
    ),
    'extra_key' => array(
      'enabled' => FALSE,
      'identifier' => 'EXTRA-KEY',
      'generate' => FALSE,
    ),
    'parameters_type' => 'http_headers',
  );
}

/**
 * Settings callback for Services authentication.
 *
 * @see hook_services_authentication_info()
 */
function _services_auth_apikeys_security_settings($settings, &$form_state) {
  $form = array();

  // API keys settings.
  $form['api_key'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Key'),
  );
  $form['api_key']['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#description' => t('What identifier do you want to use in the Service API for this key.'),
    '#default_value' => $settings['api_key']['identifier'],
    '#required' => TRUE,
  );
  $form['api_key']['generate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do you want this key to be generated by user?'),
    '#default_value' => $settings['api_key']['generate'],
  );

  $form['token'] = array(
    '#type' => 'fieldset',
    '#title' => t('Token'),
  );
  $form['token']['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#description' => t('What identifier do you want to use in the Service API for this key.'),
    '#default_value' => $settings['token']['identifier'],
    '#required' => TRUE,
  );
  $form['token']['generate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do you want this key to be generated by user?'),
    '#default_value' => $settings['token']['generate'],
  );

  /*
  $form['extra_key'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra Key'),
  );
  $form['extra_key']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do you need an extra key for authentication?'),
    '#default_value' => $settings['extra_key']['enabled'],
  );
  $form['extra_key']['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#description' => t('What identifier do you want to use in the Service API for this key.'),
    '#default_value' => $settings['extra_key']['identifier'],
    '#states' => array(
      'visible' => array(
        '#edit-services-auth-keys-extra-key-enabled' => array('checked' => TRUE),
      ),
    ),
  );
  $form['extra_key']['generate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do you want this key to be generated by user?'),
    '#default_value' => $settings['extra_key']['generate'],
    '#states' => array(
      'visible' => array(
        '#edit-services-auth-keys-extra-key-enabled' => array('checked' => TRUE),
      ),
    ),
  );
  */

  // ToDo : Make selection for the type of API keys parameters.
  $form['parameters_type'] = array(
    '#type' => 'value',
    '#value' => $settings['parameters_type'],
  );

  return $form;
}

/**
 * Form callback for the user API keys management form.
 */
function services_auth_apikeys_user_form($form, &$form_state, $account) {
  // Get the services endpoints that use this authentication.
  $all_services_endpoints = services_endpoint_load_all();
  foreach ($all_services_endpoints as $services_endpoint) {
    if (!empty($services_endpoint->authentication['services_auth_apikeys'])) {
      $services_endpoints[$services_endpoint->name] = $services_endpoint;
    }
  }
  // Get the current API keys if they exist.
  $existing_apikeys = services_auth_apikeys_load_by_user($account->uid);

  // Generate the form, a API keys fieldset for every service endpoint.
  $form = array();
  foreach ($services_endpoints as $services_endpoint_name => $services_endpoint) {
    // Get the authentication settings.
    $authentication_settings = _services_auth_apikeys_get_authentication_settings($services_endpoint->authentication['services_auth_apikeys']);
    $form[$services_endpoint_name] = array(
      '#type' => 'fieldset',
      '#title' => t('Service endpoint %service', array('%service' => $services_endpoint_name)),
      '#tree' => TRUE,
    );
    $form[$services_endpoint_name]['service_endpoint'] = array(
      '#type' => 'value',
      '#value' => $services_endpoint_name,
    );
    if (empty($existing_apikeys[$services_endpoint_name])) {
      // The generate button is always shown if no API Keys exist.
      $form[$services_endpoint_name]['generate_apikeys'] = array(
        '#type' => 'submit',
        '#name' => $services_endpoint_name . '-generate-apikeys',
        '#value' => t('Generate new API Keys'),
        '#submit' => array('_services_auth_apikeys_generate_user_apikeys_service_endpoint_submit'),
      );
    }
    else {
      $apikeys = $existing_apikeys[$services_endpoint_name];
      $form[$services_endpoint_name]['apikeys_age'] = array(
        '#type' => 'item',
        '#title' => t('API keys age'),
        '#markup' => format_interval(REQUEST_TIME - $apikeys->updated),
      );

      $form[$services_endpoint_name]['current_api_key'] = array(
        '#type' => 'item',
        '#title' => t('API Key (%api_key_identifier)', array('%api_key_identifier' => $authentication_settings['api_key']['identifier'])),
        '#markup' => '<code>' . $apikeys->api_key . '</code>',
      );
      $form[$services_endpoint_name]['current_token'] = array(
        '#type' => 'item',
        '#title' => t('Token (%token_identifier)', array('%token_identifier' => $authentication_settings['token']['identifier'])),
        '#markup' => '<code>' . $apikeys->token . '</code>',
      );

      // Generate / Delete API keys buttons.
      // Warning with checkbox to inform the user before doing risky actions.
      $form[$services_endpoint_name]['warning'] = array(
        '#type' => 'item',
        '#title' => t('Warning'),
        '#markup' => t('Generating or removing API keys may results in issues elsewhere. Make sure that all external systems that uses these API Keys are updated as well, as soon as a new API keys are generated.'),
      );
      // The remove/generate buttons are only shown if the checkbox is checked.
      $form[$services_endpoint_name]['action_check'] = array(
        '#type' => 'checkbox',
        '#title' => t('Check this box if you want to remove or regenerate API keys.'),
      );
      // The generate button is shown if api key generate option is set.
      if ($authentication_settings['api_key']['generate']) {
        $form[$services_endpoint_name]['generate_api_key'] = array(
          '#type' => 'submit',
          '#name' => $services_endpoint_name . '-generate-api-key',
          '#api_key' => 'api_key',
          '#value' => t('Generate new API Key (@api_key_identifier)', array('@api_key_identifier' => $authentication_settings['api_key']['identifier'])),
          '#submit' => array('_services_auth_apikeys_generate_user_apikeys_service_endpoint_submit'),
          '#states' => array(
            'visible' => array(
              '#edit-' . $services_endpoint_name . '-action-check' => array('checked' => TRUE),
            ),
          ),
        );
      }

      // The generate button is shown if token generate option is set.
      if ($authentication_settings['token']['generate']) {
        $form[$services_endpoint_name]['generate_token'] = array(
          '#type' => 'submit',
          '#name' => $services_endpoint_name . '-generate-token',
          '#api_key' => 'token',
          '#value' => t('Generate new token (@token_identifier)', array('@token_identifier' => $authentication_settings['token']['identifier'])),
          '#submit' => array('_services_auth_apikeys_generate_user_apikeys_service_endpoint_submit'),
          '#states' => array(
            'visible' => array(
              '#edit-' . $services_endpoint_name . '-action-check' => array('checked' => TRUE),
            ),
          ),
        );
      }

      // ToDo : Implement extra key.

      // Delete (all) API keys button.
      $form[$services_endpoint_name]['delete'] = array(
        '#type' => 'submit',
        '#name' => $services_endpoint_name . '-delete',
        '#value' => t('Delete API keys'),
        '#submit' => array('_services_auth_apikeys_delete_user_apikeys_service_endpoint_submit'),
        '#states' => array(
          'visible' => array(
            '#edit-' . $services_endpoint_name . '-action-check' => array('checked' => TRUE),
          ),
        ),
      );
    }
  }

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );

  return $form;
}

/**
 * Submit callback for generating the API Keys.
 */
function _services_auth_apikeys_generate_user_apikeys_service_endpoint_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $values = drupal_array_get_nested_value($form_state['values'], array_slice($button['#array_parents'], 0, -1));
  // Generate one api key.
  if (!empty($button['#api_key'])) {
    services_auth_apikeys_update_apikeys($form_state['values']['uid'], $values['service_endpoint'], array($button['#api_key']));
    $services_endpoint = services_endpoint_load($values['service_endpoint']);
    $authentication_settings = _services_auth_apikeys_get_authentication_settings($services_endpoint->authentication['services_auth_apikeys']);
    drupal_set_message(t('The %api_key API key for %service_endpoint service endpoint has been generated.', array('%api_key' => $authentication_settings[$button['#api_key']]['identifier'] . ' (' . $button['#api_key'] . ')', '%service_endpoint' => $values['service_endpoint'])));
  }
  // Generate all API keys.
  else {
    services_auth_apikeys_update_apikeys($form_state['values']['uid'], $values['service_endpoint']);
    drupal_set_message(t('The API keys for %service_endpoint service endpoint has been generated.', array('%service_endpoint' => $values['service_endpoint'])));
  }
}

/**
 * Submit callback for API keys deletion.
 */
function _services_auth_apikeys_delete_user_apikeys_service_endpoint_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $values = drupal_array_get_nested_value($form_state['values'], array_slice($button['#array_parents'], 0, -1));
  services_auth_apikeys_delete_apikeys($form_state['values']['uid'], $values['service_endpoint']);
  drupal_set_message(t('The API keys for %service_endpoint service endpoint has been deleted.', array('%service_endpoint' => $values['service_endpoint'])));
}
